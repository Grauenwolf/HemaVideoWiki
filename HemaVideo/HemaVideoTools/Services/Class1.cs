//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v11.17.0.0 (NJsonSchema v9.10.42.0 (Newtonsoft.Json v9.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

namespace HemaVideoTools.Services
{
#pragma warning disable // Disable all warnings

	[System.CodeDom.Compiler.GeneratedCode("NSwag", "11.17.0.0 (NJsonSchema v9.10.42.0 (Newtonsoft.Json v9.0.0.0))")]
	public partial class Client
	{
		private string _baseUrl = "";
		private System.Net.Http.HttpClient _httpClient;
		private System.Lazy<Newtonsoft.Json.JsonSerializerSettings> _settings;

		public Client(string baseUrl, System.Net.Http.HttpClient httpClient)
		{
			BaseUrl = baseUrl;
			_httpClient = httpClient;
			_settings = new System.Lazy<Newtonsoft.Json.JsonSerializerSettings>(() =>
			{
				var settings = new Newtonsoft.Json.JsonSerializerSettings();
				UpdateJsonSerializerSettings(settings);
				return settings;
			});
		}

		public string BaseUrl
		{
			get { return _baseUrl; }
			set { _baseUrl = value; }
		}

		protected Newtonsoft.Json.JsonSerializerSettings JsonSerializerSettings { get { return _settings.Value; } }

		partial void UpdateJsonSerializerSettings(Newtonsoft.Json.JsonSerializerSettings settings);
		partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, string url);
		partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, System.Text.StringBuilder urlBuilder);
		partial void ProcessResponse(System.Net.Http.HttpClient client, System.Net.Http.HttpResponseMessage response);

		/// <returns>Success</returns>
		/// <exception cref="SwaggerException">A server side error occurred.</exception>
		public System.Threading.Tasks.Task ApiAccountLogoutPostAsync()
		{
			return ApiAccountLogoutPostAsync(System.Threading.CancellationToken.None);
		}

		/// <returns>Success</returns>
		/// <exception cref="SwaggerException">A server side error occurred.</exception>
		/// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
		public async System.Threading.Tasks.Task ApiAccountLogoutPostAsync(System.Threading.CancellationToken cancellationToken)
		{
			var urlBuilder_ = new System.Text.StringBuilder();
			urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/account/logout");

			var client_ = _httpClient;
			try
			{
				using (var request_ = new System.Net.Http.HttpRequestMessage())
				{
					request_.Content = new System.Net.Http.StringContent(string.Empty, System.Text.Encoding.UTF8, "application/json");
					request_.Method = new System.Net.Http.HttpMethod("POST");

					PrepareRequest(client_, request_, urlBuilder_);
					var url_ = urlBuilder_.ToString();
					request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
					PrepareRequest(client_, request_, url_);

					var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
					try
					{
						var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
						if (response_.Content != null && response_.Content.Headers != null)
						{
							foreach (var item_ in response_.Content.Headers)
								headers_[item_.Key] = item_.Value;
						}

						ProcessResponse(client_, response_);

						var status_ = ((int)response_.StatusCode).ToString();
						if (status_ == "200")
						{
							return;
						}
						else
						if (status_ != "200" && status_ != "204")
						{
							var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
						}
					}
					finally
					{
						if (response_ != null)
							response_.Dispose();
					}
				}
			}
			finally
			{
			}
		}

		/// <returns>Success</returns>
		/// <exception cref="SwaggerException">A server side error occurred.</exception>
		public System.Threading.Tasks.Task<bool> ApiAccountLoginPostAsync(string email, string password, bool rememberMe)
		{
			return ApiAccountLoginPostAsync(email, password, rememberMe, System.Threading.CancellationToken.None);
		}

		/// <returns>Success</returns>
		/// <exception cref="SwaggerException">A server side error occurred.</exception>
		/// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
		public async System.Threading.Tasks.Task<bool> ApiAccountLoginPostAsync(string email, string password, bool rememberMe, System.Threading.CancellationToken cancellationToken)
		{
			if (email == null)
				throw new System.ArgumentNullException("email");

			if (password == null)
				throw new System.ArgumentNullException("password");

			if (rememberMe == null)
				throw new System.ArgumentNullException("rememberMe");

			var urlBuilder_ = new System.Text.StringBuilder();
			urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/account/login?");
			urlBuilder_.Append("Email=").Append(System.Uri.EscapeDataString(ConvertToString(email, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
			urlBuilder_.Append("Password=").Append(System.Uri.EscapeDataString(ConvertToString(password, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
			urlBuilder_.Append("RememberMe=").Append(System.Uri.EscapeDataString(ConvertToString(rememberMe, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
			urlBuilder_.Length--;

			var client_ = _httpClient;
			try
			{
				using (var request_ = new System.Net.Http.HttpRequestMessage())
				{
					request_.Content = new System.Net.Http.StringContent(string.Empty, System.Text.Encoding.UTF8, "application/json");
					request_.Method = new System.Net.Http.HttpMethod("POST");
					request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));

					PrepareRequest(client_, request_, urlBuilder_);
					var url_ = urlBuilder_.ToString();
					request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
					PrepareRequest(client_, request_, url_);

					var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
					try
					{
						var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
						if (response_.Content != null && response_.Content.Headers != null)
						{
							foreach (var item_ in response_.Content.Headers)
								headers_[item_.Key] = item_.Value;
						}

						ProcessResponse(client_, response_);

						var status_ = ((int)response_.StatusCode).ToString();
						if (status_ == "200")
						{
							var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							var result_ = default(bool);
							try
							{
								result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<bool>(responseData_, _settings.Value);
								return result_;
							}
							catch (System.Exception exception_)
							{
								throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
							}
						}
						else
						if (status_ != "200" && status_ != "204")
						{
							var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
						}

						return default(bool);
					}
					finally
					{
						if (response_ != null)
							response_.Dispose();
					}
				}
			}
			finally
			{
			}
		}

		/// <returns>Success</returns>
		/// <exception cref="SwaggerException">A server side error occurred.</exception>
		public System.Threading.Tasks.Task<ApplicationUser> ApiAccountWhoAmIGetAsync()
		{
			return ApiAccountWhoAmIGetAsync(System.Threading.CancellationToken.None);
		}

		/// <returns>Success</returns>
		/// <exception cref="SwaggerException">A server side error occurred.</exception>
		/// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
		public async System.Threading.Tasks.Task<ApplicationUser> ApiAccountWhoAmIGetAsync(System.Threading.CancellationToken cancellationToken)
		{
			var urlBuilder_ = new System.Text.StringBuilder();
			urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/account/whoAmI");

			var client_ = _httpClient;
			try
			{
				using (var request_ = new System.Net.Http.HttpRequestMessage())
				{
					request_.Method = new System.Net.Http.HttpMethod("GET");
					request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));

					PrepareRequest(client_, request_, urlBuilder_);
					var url_ = urlBuilder_.ToString();
					request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
					PrepareRequest(client_, request_, url_);

					var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
					try
					{
						var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
						if (response_.Content != null && response_.Content.Headers != null)
						{
							foreach (var item_ in response_.Content.Headers)
								headers_[item_.Key] = item_.Value;
						}

						ProcessResponse(client_, response_);

						var status_ = ((int)response_.StatusCode).ToString();
						if (status_ == "200")
						{
							var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							var result_ = default(ApplicationUser);
							try
							{
								result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<ApplicationUser>(responseData_, _settings.Value);
								return result_;
							}
							catch (System.Exception exception_)
							{
								throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
							}
						}
						else
						if (status_ != "200" && status_ != "204")
						{
							var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
						}

						return default(ApplicationUser);
					}
					finally
					{
						if (response_ != null)
							response_.Dispose();
					}
				}
			}
			finally
			{
			}
		}

		/// <returns>Success</returns>
		/// <exception cref="SwaggerException">A server side error occurred.</exception>
		public System.Threading.Tasks.Task<BookSummary> ApiBookByBookKeyGetAsync(int bookKey)
		{
			return ApiBookByBookKeyGetAsync(bookKey, System.Threading.CancellationToken.None);
		}

		/// <returns>Success</returns>
		/// <exception cref="SwaggerException">A server side error occurred.</exception>
		/// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
		public async System.Threading.Tasks.Task<BookSummary> ApiBookByBookKeyGetAsync(int bookKey, System.Threading.CancellationToken cancellationToken)
		{
			if (bookKey == null)
				throw new System.ArgumentNullException("bookKey");

			var urlBuilder_ = new System.Text.StringBuilder();
			urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/book/{bookKey}");
			urlBuilder_.Replace("{bookKey}", System.Uri.EscapeDataString(ConvertToString(bookKey, System.Globalization.CultureInfo.InvariantCulture)));

			var client_ = _httpClient;
			try
			{
				using (var request_ = new System.Net.Http.HttpRequestMessage())
				{
					request_.Method = new System.Net.Http.HttpMethod("GET");
					request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));

					PrepareRequest(client_, request_, urlBuilder_);
					var url_ = urlBuilder_.ToString();
					request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
					PrepareRequest(client_, request_, url_);

					var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
					try
					{
						var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
						if (response_.Content != null && response_.Content.Headers != null)
						{
							foreach (var item_ in response_.Content.Headers)
								headers_[item_.Key] = item_.Value;
						}

						ProcessResponse(client_, response_);

						var status_ = ((int)response_.StatusCode).ToString();
						if (status_ == "200")
						{
							var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							var result_ = default(BookSummary);
							try
							{
								result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<BookSummary>(responseData_, _settings.Value);
								return result_;
							}
							catch (System.Exception exception_)
							{
								throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
							}
						}
						else
						if (status_ != "200" && status_ != "204")
						{
							var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
						}

						return default(BookSummary);
					}
					finally
					{
						if (response_ != null)
							response_.Dispose();
					}
				}
			}
			finally
			{
			}
		}

		/// <returns>Success</returns>
		/// <exception cref="SwaggerException">A server side error occurred.</exception>
		public System.Threading.Tasks.Task<BookDetail> ApiBookByBookKeyDetailGetAsync(int bookKey)
		{
			return ApiBookByBookKeyDetailGetAsync(bookKey, System.Threading.CancellationToken.None);
		}

		/// <returns>Success</returns>
		/// <exception cref="SwaggerException">A server side error occurred.</exception>
		/// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
		public async System.Threading.Tasks.Task<BookDetail> ApiBookByBookKeyDetailGetAsync(int bookKey, System.Threading.CancellationToken cancellationToken)
		{
			if (bookKey == null)
				throw new System.ArgumentNullException("bookKey");

			var urlBuilder_ = new System.Text.StringBuilder();
			urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/book/{bookKey}/detail");
			urlBuilder_.Replace("{bookKey}", System.Uri.EscapeDataString(ConvertToString(bookKey, System.Globalization.CultureInfo.InvariantCulture)));

			var client_ = _httpClient;
			try
			{
				using (var request_ = new System.Net.Http.HttpRequestMessage())
				{
					request_.Method = new System.Net.Http.HttpMethod("GET");
					request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));

					PrepareRequest(client_, request_, urlBuilder_);
					var url_ = urlBuilder_.ToString();
					request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
					PrepareRequest(client_, request_, url_);

					var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
					try
					{
						var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
						if (response_.Content != null && response_.Content.Headers != null)
						{
							foreach (var item_ in response_.Content.Headers)
								headers_[item_.Key] = item_.Value;
						}

						ProcessResponse(client_, response_);

						var status_ = ((int)response_.StatusCode).ToString();
						if (status_ == "200")
						{
							var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							var result_ = default(BookDetail);
							try
							{
								result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<BookDetail>(responseData_, _settings.Value);
								return result_;
							}
							catch (System.Exception exception_)
							{
								throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
							}
						}
						else
						if (status_ != "200" && status_ != "204")
						{
							var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
						}

						return default(BookDetail);
					}
					finally
					{
						if (response_ != null)
							response_.Dispose();
					}
				}
			}
			finally
			{
			}
		}

		/// <returns>Success</returns>
		/// <exception cref="SwaggerException">A server side error occurred.</exception>
		public System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<BookSummary>> ApiBookGetAsync()
		{
			return ApiBookGetAsync(System.Threading.CancellationToken.None);
		}

		/// <returns>Success</returns>
		/// <exception cref="SwaggerException">A server side error occurred.</exception>
		/// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
		public async System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<BookSummary>> ApiBookGetAsync(System.Threading.CancellationToken cancellationToken)
		{
			var urlBuilder_ = new System.Text.StringBuilder();
			urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/book");

			var client_ = _httpClient;
			try
			{
				using (var request_ = new System.Net.Http.HttpRequestMessage())
				{
					request_.Method = new System.Net.Http.HttpMethod("GET");
					request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));

					PrepareRequest(client_, request_, urlBuilder_);
					var url_ = urlBuilder_.ToString();
					request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
					PrepareRequest(client_, request_, url_);

					var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
					try
					{
						var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
						if (response_.Content != null && response_.Content.Headers != null)
						{
							foreach (var item_ in response_.Content.Headers)
								headers_[item_.Key] = item_.Value;
						}

						ProcessResponse(client_, response_);

						var status_ = ((int)response_.StatusCode).ToString();
						if (status_ == "200")
						{
							var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							var result_ = default(System.Collections.ObjectModel.ObservableCollection<BookSummary>);
							try
							{
								result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<System.Collections.ObjectModel.ObservableCollection<BookSummary>>(responseData_, _settings.Value);
								return result_;
							}
							catch (System.Exception exception_)
							{
								throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
							}
						}
						else
						if (status_ != "200" && status_ != "204")
						{
							var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
						}

						return default(System.Collections.ObjectModel.ObservableCollection<BookSummary>);
					}
					finally
					{
						if (response_ != null)
							response_.Dispose();
					}
				}
			}
			finally
			{
			}
		}

		/// <returns>Success</returns>
		/// <exception cref="SwaggerException">A server side error occurred.</exception>
		public System.Threading.Tasks.Task<SectionDetail> ApiBookByBookKeyBySectionKeyGetAsync(int sectionKey, string bookKey)
		{
			return ApiBookByBookKeyBySectionKeyGetAsync(sectionKey, bookKey, System.Threading.CancellationToken.None);
		}

		/// <returns>Success</returns>
		/// <exception cref="SwaggerException">A server side error occurred.</exception>
		/// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
		public async System.Threading.Tasks.Task<SectionDetail> ApiBookByBookKeyBySectionKeyGetAsync(int sectionKey, string bookKey, System.Threading.CancellationToken cancellationToken)
		{
			if (sectionKey == null)
				throw new System.ArgumentNullException("sectionKey");

			if (bookKey == null)
				throw new System.ArgumentNullException("bookKey");

			var urlBuilder_ = new System.Text.StringBuilder();
			urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/book/{BookKey}/{SectionKey}");
			urlBuilder_.Replace("{SectionKey}", System.Uri.EscapeDataString(ConvertToString(sectionKey, System.Globalization.CultureInfo.InvariantCulture)));
			urlBuilder_.Replace("{BookKey}", System.Uri.EscapeDataString(ConvertToString(bookKey, System.Globalization.CultureInfo.InvariantCulture)));

			var client_ = _httpClient;
			try
			{
				using (var request_ = new System.Net.Http.HttpRequestMessage())
				{
					request_.Method = new System.Net.Http.HttpMethod("GET");
					request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));

					PrepareRequest(client_, request_, urlBuilder_);
					var url_ = urlBuilder_.ToString();
					request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
					PrepareRequest(client_, request_, url_);

					var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
					try
					{
						var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
						if (response_.Content != null && response_.Content.Headers != null)
						{
							foreach (var item_ in response_.Content.Headers)
								headers_[item_.Key] = item_.Value;
						}

						ProcessResponse(client_, response_);

						var status_ = ((int)response_.StatusCode).ToString();
						if (status_ == "200")
						{
							var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							var result_ = default(SectionDetail);
							try
							{
								result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<SectionDetail>(responseData_, _settings.Value);
								return result_;
							}
							catch (System.Exception exception_)
							{
								throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
							}
						}
						else
						if (status_ != "200" && status_ != "204")
						{
							var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
						}

						return default(SectionDetail);
					}
					finally
					{
						if (response_ != null)
							response_.Dispose();
					}
				}
			}
			finally
			{
			}
		}

		/// <returns>Success</returns>
		/// <exception cref="SwaggerException">A server side error occurred.</exception>
		public System.Threading.Tasks.Task<int> ApiBookAddVideoPostAsync(NewVideo video)
		{
			return ApiBookAddVideoPostAsync(video, System.Threading.CancellationToken.None);
		}

		/// <returns>Success</returns>
		/// <exception cref="SwaggerException">A server side error occurred.</exception>
		/// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
		public async System.Threading.Tasks.Task<int> ApiBookAddVideoPostAsync(NewVideo video, System.Threading.CancellationToken cancellationToken)
		{
			var urlBuilder_ = new System.Text.StringBuilder();
			urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/book/addVideo");

			var client_ = _httpClient;
			try
			{
				using (var request_ = new System.Net.Http.HttpRequestMessage())
				{
					var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(video, _settings.Value));
					content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
					request_.Content = content_;
					request_.Method = new System.Net.Http.HttpMethod("POST");
					request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));

					PrepareRequest(client_, request_, urlBuilder_);
					var url_ = urlBuilder_.ToString();
					request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
					PrepareRequest(client_, request_, url_);

					var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
					try
					{
						var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
						if (response_.Content != null && response_.Content.Headers != null)
						{
							foreach (var item_ in response_.Content.Headers)
								headers_[item_.Key] = item_.Value;
						}

						ProcessResponse(client_, response_);

						var status_ = ((int)response_.StatusCode).ToString();
						if (status_ == "200")
						{
							var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							var result_ = default(int);
							try
							{
								result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<int>(responseData_, _settings.Value);
								return result_;
							}
							catch (System.Exception exception_)
							{
								throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
							}
						}
						else
						if (status_ != "200" && status_ != "204")
						{
							var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
						}

						return default(int);
					}
					finally
					{
						if (response_ != null)
							response_.Dispose();
					}
				}
			}
			finally
			{
			}
		}

		/// <returns>Success</returns>
		/// <exception cref="SwaggerException">A server side error occurred.</exception>
		public System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<Weapon>> ApiTagWeaponGetAsync()
		{
			return ApiTagWeaponGetAsync(System.Threading.CancellationToken.None);
		}

		/// <returns>Success</returns>
		/// <exception cref="SwaggerException">A server side error occurred.</exception>
		/// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
		public async System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<Weapon>> ApiTagWeaponGetAsync(System.Threading.CancellationToken cancellationToken)
		{
			var urlBuilder_ = new System.Text.StringBuilder();
			urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/tag/weapon");

			var client_ = _httpClient;
			try
			{
				using (var request_ = new System.Net.Http.HttpRequestMessage())
				{
					request_.Method = new System.Net.Http.HttpMethod("GET");
					request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));

					PrepareRequest(client_, request_, urlBuilder_);
					var url_ = urlBuilder_.ToString();
					request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
					PrepareRequest(client_, request_, url_);

					var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
					try
					{
						var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
						if (response_.Content != null && response_.Content.Headers != null)
						{
							foreach (var item_ in response_.Content.Headers)
								headers_[item_.Key] = item_.Value;
						}

						ProcessResponse(client_, response_);

						var status_ = ((int)response_.StatusCode).ToString();
						if (status_ == "200")
						{
							var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							var result_ = default(System.Collections.ObjectModel.ObservableCollection<Weapon>);
							try
							{
								result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<System.Collections.ObjectModel.ObservableCollection<Weapon>>(responseData_, _settings.Value);
								return result_;
							}
							catch (System.Exception exception_)
							{
								throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
							}
						}
						else
						if (status_ != "200" && status_ != "204")
						{
							var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
						}

						return default(System.Collections.ObjectModel.ObservableCollection<Weapon>);
					}
					finally
					{
						if (response_ != null)
							response_.Dispose();
					}
				}
			}
			finally
			{
			}
		}

		/// <returns>Success</returns>
		/// <exception cref="SwaggerException">A server side error occurred.</exception>
		public System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<Technique>> ApiTagTechniqueGetAsync()
		{
			return ApiTagTechniqueGetAsync(System.Threading.CancellationToken.None);
		}

		/// <returns>Success</returns>
		/// <exception cref="SwaggerException">A server side error occurred.</exception>
		/// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
		public async System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<Technique>> ApiTagTechniqueGetAsync(System.Threading.CancellationToken cancellationToken)
		{
			var urlBuilder_ = new System.Text.StringBuilder();
			urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/tag/technique");

			var client_ = _httpClient;
			try
			{
				using (var request_ = new System.Net.Http.HttpRequestMessage())
				{
					request_.Method = new System.Net.Http.HttpMethod("GET");
					request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));

					PrepareRequest(client_, request_, urlBuilder_);
					var url_ = urlBuilder_.ToString();
					request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
					PrepareRequest(client_, request_, url_);

					var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
					try
					{
						var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
						if (response_.Content != null && response_.Content.Headers != null)
						{
							foreach (var item_ in response_.Content.Headers)
								headers_[item_.Key] = item_.Value;
						}

						ProcessResponse(client_, response_);

						var status_ = ((int)response_.StatusCode).ToString();
						if (status_ == "200")
						{
							var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							var result_ = default(System.Collections.ObjectModel.ObservableCollection<Technique>);
							try
							{
								result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<System.Collections.ObjectModel.ObservableCollection<Technique>>(responseData_, _settings.Value);
								return result_;
							}
							catch (System.Exception exception_)
							{
								throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
							}
						}
						else
						if (status_ != "200" && status_ != "204")
						{
							var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
						}

						return default(System.Collections.ObjectModel.ObservableCollection<Technique>);
					}
					finally
					{
						if (response_ != null)
							response_.Dispose();
					}
				}
			}
			finally
			{
			}
		}

		/// <returns>Success</returns>
		/// <exception cref="SwaggerException">A server side error occurred.</exception>
		public System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<Target>> ApiTagTargetGetAsync()
		{
			return ApiTagTargetGetAsync(System.Threading.CancellationToken.None);
		}

		/// <returns>Success</returns>
		/// <exception cref="SwaggerException">A server side error occurred.</exception>
		/// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
		public async System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<Target>> ApiTagTargetGetAsync(System.Threading.CancellationToken cancellationToken)
		{
			var urlBuilder_ = new System.Text.StringBuilder();
			urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/tag/target");

			var client_ = _httpClient;
			try
			{
				using (var request_ = new System.Net.Http.HttpRequestMessage())
				{
					request_.Method = new System.Net.Http.HttpMethod("GET");
					request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));

					PrepareRequest(client_, request_, urlBuilder_);
					var url_ = urlBuilder_.ToString();
					request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
					PrepareRequest(client_, request_, url_);

					var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
					try
					{
						var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
						if (response_.Content != null && response_.Content.Headers != null)
						{
							foreach (var item_ in response_.Content.Headers)
								headers_[item_.Key] = item_.Value;
						}

						ProcessResponse(client_, response_);

						var status_ = ((int)response_.StatusCode).ToString();
						if (status_ == "200")
						{
							var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							var result_ = default(System.Collections.ObjectModel.ObservableCollection<Target>);
							try
							{
								result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<System.Collections.ObjectModel.ObservableCollection<Target>>(responseData_, _settings.Value);
								return result_;
							}
							catch (System.Exception exception_)
							{
								throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
							}
						}
						else
						if (status_ != "200" && status_ != "204")
						{
							var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
						}

						return default(System.Collections.ObjectModel.ObservableCollection<Target>);
					}
					finally
					{
						if (response_ != null)
							response_.Dispose();
					}
				}
			}
			finally
			{
			}
		}

		/// <returns>Success</returns>
		/// <exception cref="SwaggerException">A server side error occurred.</exception>
		public System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<Guard>> ApiTagGuardGetAsync()
		{
			return ApiTagGuardGetAsync(System.Threading.CancellationToken.None);
		}

		/// <returns>Success</returns>
		/// <exception cref="SwaggerException">A server side error occurred.</exception>
		/// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
		public async System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<Guard>> ApiTagGuardGetAsync(System.Threading.CancellationToken cancellationToken)
		{
			var urlBuilder_ = new System.Text.StringBuilder();
			urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/tag/guard");

			var client_ = _httpClient;
			try
			{
				using (var request_ = new System.Net.Http.HttpRequestMessage())
				{
					request_.Method = new System.Net.Http.HttpMethod("GET");
					request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));

					PrepareRequest(client_, request_, urlBuilder_);
					var url_ = urlBuilder_.ToString();
					request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
					PrepareRequest(client_, request_, url_);

					var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
					try
					{
						var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
						if (response_.Content != null && response_.Content.Headers != null)
						{
							foreach (var item_ in response_.Content.Headers)
								headers_[item_.Key] = item_.Value;
						}

						ProcessResponse(client_, response_);

						var status_ = ((int)response_.StatusCode).ToString();
						if (status_ == "200")
						{
							var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							var result_ = default(System.Collections.ObjectModel.ObservableCollection<Guard>);
							try
							{
								result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<System.Collections.ObjectModel.ObservableCollection<Guard>>(responseData_, _settings.Value);
								return result_;
							}
							catch (System.Exception exception_)
							{
								throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
							}
						}
						else
						if (status_ != "200" && status_ != "204")
						{
							var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
						}

						return default(System.Collections.ObjectModel.ObservableCollection<Guard>);
					}
					finally
					{
						if (response_ != null)
							response_.Dispose();
					}
				}
			}
			finally
			{
			}
		}

		/// <returns>Success</returns>
		/// <exception cref="SwaggerException">A server side error occurred.</exception>
		public System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<GuardModifer>> ApiTagGuardModifierGetAsync()
		{
			return ApiTagGuardModifierGetAsync(System.Threading.CancellationToken.None);
		}

		/// <returns>Success</returns>
		/// <exception cref="SwaggerException">A server side error occurred.</exception>
		/// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
		public async System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<GuardModifer>> ApiTagGuardModifierGetAsync(System.Threading.CancellationToken cancellationToken)
		{
			var urlBuilder_ = new System.Text.StringBuilder();
			urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/tag/guardModifier");

			var client_ = _httpClient;
			try
			{
				using (var request_ = new System.Net.Http.HttpRequestMessage())
				{
					request_.Method = new System.Net.Http.HttpMethod("GET");
					request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));

					PrepareRequest(client_, request_, urlBuilder_);
					var url_ = urlBuilder_.ToString();
					request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
					PrepareRequest(client_, request_, url_);

					var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
					try
					{
						var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
						if (response_.Content != null && response_.Content.Headers != null)
						{
							foreach (var item_ in response_.Content.Headers)
								headers_[item_.Key] = item_.Value;
						}

						ProcessResponse(client_, response_);

						var status_ = ((int)response_.StatusCode).ToString();
						if (status_ == "200")
						{
							var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							var result_ = default(System.Collections.ObjectModel.ObservableCollection<GuardModifer>);
							try
							{
								result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<System.Collections.ObjectModel.ObservableCollection<GuardModifer>>(responseData_, _settings.Value);
								return result_;
							}
							catch (System.Exception exception_)
							{
								throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
							}
						}
						else
						if (status_ != "200" && status_ != "204")
						{
							var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
						}

						return default(System.Collections.ObjectModel.ObservableCollection<GuardModifer>);
					}
					finally
					{
						if (response_ != null)
							response_.Dispose();
					}
				}
			}
			finally
			{
			}
		}

		/// <returns>Success</returns>
		/// <exception cref="SwaggerException">A server side error occurred.</exception>
		public System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<Footwork>> ApiTagFootworkGetAsync()
		{
			return ApiTagFootworkGetAsync(System.Threading.CancellationToken.None);
		}

		/// <returns>Success</returns>
		/// <exception cref="SwaggerException">A server side error occurred.</exception>
		/// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
		public async System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<Footwork>> ApiTagFootworkGetAsync(System.Threading.CancellationToken cancellationToken)
		{
			var urlBuilder_ = new System.Text.StringBuilder();
			urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/tag/footwork");

			var client_ = _httpClient;
			try
			{
				using (var request_ = new System.Net.Http.HttpRequestMessage())
				{
					request_.Method = new System.Net.Http.HttpMethod("GET");
					request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));

					PrepareRequest(client_, request_, urlBuilder_);
					var url_ = urlBuilder_.ToString();
					request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
					PrepareRequest(client_, request_, url_);

					var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
					try
					{
						var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
						if (response_.Content != null && response_.Content.Headers != null)
						{
							foreach (var item_ in response_.Content.Headers)
								headers_[item_.Key] = item_.Value;
						}

						ProcessResponse(client_, response_);

						var status_ = ((int)response_.StatusCode).ToString();
						if (status_ == "200")
						{
							var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							var result_ = default(System.Collections.ObjectModel.ObservableCollection<Footwork>);
							try
							{
								result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<System.Collections.ObjectModel.ObservableCollection<Footwork>>(responseData_, _settings.Value);
								return result_;
							}
							catch (System.Exception exception_)
							{
								throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
							}
						}
						else
						if (status_ != "200" && status_ != "204")
						{
							var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
						}

						return default(System.Collections.ObjectModel.ObservableCollection<Footwork>);
					}
					finally
					{
						if (response_ != null)
							response_.Dispose();
					}
				}
			}
			finally
			{
			}
		}

		private string ConvertToString(object value, System.Globalization.CultureInfo cultureInfo)
		{
			if (value is System.Enum)
			{
				string name = System.Enum.GetName(value.GetType(), value);
				if (name != null)
				{
					var field = System.Reflection.IntrospectionExtensions.GetTypeInfo(value.GetType()).GetDeclaredField(name);
					if (field != null)
					{
						var attribute = System.Reflection.CustomAttributeExtensions.GetCustomAttribute(field, typeof(System.Runtime.Serialization.EnumMemberAttribute))
							as System.Runtime.Serialization.EnumMemberAttribute;
						if (attribute != null)
						{
							return attribute.Value;
						}
					}
				}
			}
			else if (value is byte[])
			{
				return System.Convert.ToBase64String((byte[])value);
			}
			else if (value.GetType().IsArray)
			{
				var array = System.Linq.Enumerable.OfType<object>((System.Array)value);
				return string.Join(",", System.Linq.Enumerable.Select(array, o => ConvertToString(o, cultureInfo)));
			}

			return System.Convert.ToString(value, cultureInfo);
		}
	}



	[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.42.0 (Newtonsoft.Json v9.0.0.0)")]
	public partial class ApplicationUser : System.ComponentModel.INotifyPropertyChanged
	{
		private string _displayName;
		private int? _userKey;
		private string _id;
		private string _userName;
		private string _normalizedUserName;
		private string _email;
		private string _normalizedEmail;
		private bool? _emailConfirmed;
		private string _passwordHash;
		private string _securityStamp;
		private string _concurrencyStamp;
		private string _phoneNumber;
		private bool? _phoneNumberConfirmed;
		private bool? _twoFactorEnabled;
		private System.DateTime? _lockoutEnd;
		private bool? _lockoutEnabled;
		private int? _accessFailedCount;

		[Newtonsoft.Json.JsonProperty("displayName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public string DisplayName
		{
			get { return _displayName; }
			set
			{
				if (_displayName != value)
				{
					_displayName = value;
					RaisePropertyChanged();
				}
			}
		}

		[Newtonsoft.Json.JsonProperty("userKey", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public int? UserKey
		{
			get { return _userKey; }
			set
			{
				if (_userKey != value)
				{
					_userKey = value;
					RaisePropertyChanged();
				}
			}
		}

		[Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public string Id
		{
			get { return _id; }
			set
			{
				if (_id != value)
				{
					_id = value;
					RaisePropertyChanged();
				}
			}
		}

		[Newtonsoft.Json.JsonProperty("userName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public string UserName
		{
			get { return _userName; }
			set
			{
				if (_userName != value)
				{
					_userName = value;
					RaisePropertyChanged();
				}
			}
		}

		[Newtonsoft.Json.JsonProperty("normalizedUserName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public string NormalizedUserName
		{
			get { return _normalizedUserName; }
			set
			{
				if (_normalizedUserName != value)
				{
					_normalizedUserName = value;
					RaisePropertyChanged();
				}
			}
		}

		[Newtonsoft.Json.JsonProperty("email", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public string Email
		{
			get { return _email; }
			set
			{
				if (_email != value)
				{
					_email = value;
					RaisePropertyChanged();
				}
			}
		}

		[Newtonsoft.Json.JsonProperty("normalizedEmail", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public string NormalizedEmail
		{
			get { return _normalizedEmail; }
			set
			{
				if (_normalizedEmail != value)
				{
					_normalizedEmail = value;
					RaisePropertyChanged();
				}
			}
		}

		[Newtonsoft.Json.JsonProperty("emailConfirmed", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public bool? EmailConfirmed
		{
			get { return _emailConfirmed; }
			set
			{
				if (_emailConfirmed != value)
				{
					_emailConfirmed = value;
					RaisePropertyChanged();
				}
			}
		}

		[Newtonsoft.Json.JsonProperty("passwordHash", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public string PasswordHash
		{
			get { return _passwordHash; }
			set
			{
				if (_passwordHash != value)
				{
					_passwordHash = value;
					RaisePropertyChanged();
				}
			}
		}

		[Newtonsoft.Json.JsonProperty("securityStamp", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public string SecurityStamp
		{
			get { return _securityStamp; }
			set
			{
				if (_securityStamp != value)
				{
					_securityStamp = value;
					RaisePropertyChanged();
				}
			}
		}

		[Newtonsoft.Json.JsonProperty("concurrencyStamp", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public string ConcurrencyStamp
		{
			get { return _concurrencyStamp; }
			set
			{
				if (_concurrencyStamp != value)
				{
					_concurrencyStamp = value;
					RaisePropertyChanged();
				}
			}
		}

		[Newtonsoft.Json.JsonProperty("phoneNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public string PhoneNumber
		{
			get { return _phoneNumber; }
			set
			{
				if (_phoneNumber != value)
				{
					_phoneNumber = value;
					RaisePropertyChanged();
				}
			}
		}

		[Newtonsoft.Json.JsonProperty("phoneNumberConfirmed", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public bool? PhoneNumberConfirmed
		{
			get { return _phoneNumberConfirmed; }
			set
			{
				if (_phoneNumberConfirmed != value)
				{
					_phoneNumberConfirmed = value;
					RaisePropertyChanged();
				}
			}
		}

		[Newtonsoft.Json.JsonProperty("twoFactorEnabled", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public bool? TwoFactorEnabled
		{
			get { return _twoFactorEnabled; }
			set
			{
				if (_twoFactorEnabled != value)
				{
					_twoFactorEnabled = value;
					RaisePropertyChanged();
				}
			}
		}

		[Newtonsoft.Json.JsonProperty("lockoutEnd", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public System.DateTime? LockoutEnd
		{
			get { return _lockoutEnd; }
			set
			{
				if (_lockoutEnd != value)
				{
					_lockoutEnd = value;
					RaisePropertyChanged();
				}
			}
		}

		[Newtonsoft.Json.JsonProperty("lockoutEnabled", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public bool? LockoutEnabled
		{
			get { return _lockoutEnabled; }
			set
			{
				if (_lockoutEnabled != value)
				{
					_lockoutEnabled = value;
					RaisePropertyChanged();
				}
			}
		}

		[Newtonsoft.Json.JsonProperty("accessFailedCount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public int? AccessFailedCount
		{
			get { return _accessFailedCount; }
			set
			{
				if (_accessFailedCount != value)
				{
					_accessFailedCount = value;
					RaisePropertyChanged();
				}
			}
		}

		public string ToJson()
		{
			return Newtonsoft.Json.JsonConvert.SerializeObject(this);
		}

		public static ApplicationUser FromJson(string data)
		{
			return Newtonsoft.Json.JsonConvert.DeserializeObject<ApplicationUser>(data);
		}

		public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;

		protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
		{
			var handler = PropertyChanged;
			if (handler != null)
				handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
		}

	}

	[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.42.0 (Newtonsoft.Json v9.0.0.0)")]
	public partial class BookSummary : System.ComponentModel.INotifyPropertyChanged
	{
		private string _alternateBookName;
		private int? _bookKey;
		private string _bookName;
		private string _bookSlug;

		[Newtonsoft.Json.JsonProperty("alternateBookName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public string AlternateBookName
		{
			get { return _alternateBookName; }
			set
			{
				if (_alternateBookName != value)
				{
					_alternateBookName = value;
					RaisePropertyChanged();
				}
			}
		}

		[Newtonsoft.Json.JsonProperty("bookKey", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public int? BookKey
		{
			get { return _bookKey; }
			set
			{
				if (_bookKey != value)
				{
					_bookKey = value;
					RaisePropertyChanged();
				}
			}
		}

		[Newtonsoft.Json.JsonProperty("bookName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public string BookName
		{
			get { return _bookName; }
			set
			{
				if (_bookName != value)
				{
					_bookName = value;
					RaisePropertyChanged();
				}
			}
		}

		[Newtonsoft.Json.JsonProperty("bookSlug", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public string BookSlug
		{
			get { return _bookSlug; }
			set
			{
				if (_bookSlug != value)
				{
					_bookSlug = value;
					RaisePropertyChanged();
				}
			}
		}

		public string ToJson()
		{
			return Newtonsoft.Json.JsonConvert.SerializeObject(this);
		}

		public static BookSummary FromJson(string data)
		{
			return Newtonsoft.Json.JsonConvert.DeserializeObject<BookSummary>(data);
		}

		public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;

		protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
		{
			var handler = PropertyChanged;
			if (handler != null)
				handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
		}

	}

	[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.42.0 (Newtonsoft.Json v9.0.0.0)")]
	public partial class BookDetail : System.ComponentModel.INotifyPropertyChanged
	{
		private System.Collections.ObjectModel.ObservableCollection<Author> _authors;
		private System.Collections.ObjectModel.ObservableCollection<SectionSummary> _sections;
		private System.Collections.ObjectModel.ObservableCollection<WeaponVersus> _weapons;
		private string _alternateBookName;
		private int? _bookKey;
		private string _bookName;
		private string _bookSlug;

		[Newtonsoft.Json.JsonProperty("authors", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public System.Collections.ObjectModel.ObservableCollection<Author> Authors
		{
			get { return _authors; }
			set
			{
				if (_authors != value)
				{
					_authors = value;
					RaisePropertyChanged();
				}
			}
		}

		[Newtonsoft.Json.JsonProperty("sections", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public System.Collections.ObjectModel.ObservableCollection<SectionSummary> Sections
		{
			get { return _sections; }
			set
			{
				if (_sections != value)
				{
					_sections = value;
					RaisePropertyChanged();
				}
			}
		}

		[Newtonsoft.Json.JsonProperty("weapons", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public System.Collections.ObjectModel.ObservableCollection<WeaponVersus> Weapons
		{
			get { return _weapons; }
			set
			{
				if (_weapons != value)
				{
					_weapons = value;
					RaisePropertyChanged();
				}
			}
		}

		[Newtonsoft.Json.JsonProperty("alternateBookName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public string AlternateBookName
		{
			get { return _alternateBookName; }
			set
			{
				if (_alternateBookName != value)
				{
					_alternateBookName = value;
					RaisePropertyChanged();
				}
			}
		}

		[Newtonsoft.Json.JsonProperty("bookKey", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public int? BookKey
		{
			get { return _bookKey; }
			set
			{
				if (_bookKey != value)
				{
					_bookKey = value;
					RaisePropertyChanged();
				}
			}
		}

		[Newtonsoft.Json.JsonProperty("bookName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public string BookName
		{
			get { return _bookName; }
			set
			{
				if (_bookName != value)
				{
					_bookName = value;
					RaisePropertyChanged();
				}
			}
		}

		[Newtonsoft.Json.JsonProperty("bookSlug", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public string BookSlug
		{
			get { return _bookSlug; }
			set
			{
				if (_bookSlug != value)
				{
					_bookSlug = value;
					RaisePropertyChanged();
				}
			}
		}

		public string ToJson()
		{
			return Newtonsoft.Json.JsonConvert.SerializeObject(this);
		}

		public static BookDetail FromJson(string data)
		{
			return Newtonsoft.Json.JsonConvert.DeserializeObject<BookDetail>(data);
		}

		public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;

		protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
		{
			var handler = PropertyChanged;
			if (handler != null)
				handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
		}

	}

	[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.42.0 (Newtonsoft.Json v9.0.0.0)")]
	public partial class Author : System.ComponentModel.INotifyPropertyChanged
	{
		private int? _authorKey;
		private string _authorName;
		private string _authorSlug;

		[Newtonsoft.Json.JsonProperty("authorKey", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public int? AuthorKey
		{
			get { return _authorKey; }
			set
			{
				if (_authorKey != value)
				{
					_authorKey = value;
					RaisePropertyChanged();
				}
			}
		}

		[Newtonsoft.Json.JsonProperty("authorName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public string AuthorName
		{
			get { return _authorName; }
			set
			{
				if (_authorName != value)
				{
					_authorName = value;
					RaisePropertyChanged();
				}
			}
		}

		[Newtonsoft.Json.JsonProperty("authorSlug", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public string AuthorSlug
		{
			get { return _authorSlug; }
			set
			{
				if (_authorSlug != value)
				{
					_authorSlug = value;
					RaisePropertyChanged();
				}
			}
		}

		public string ToJson()
		{
			return Newtonsoft.Json.JsonConvert.SerializeObject(this);
		}

		public static Author FromJson(string data)
		{
			return Newtonsoft.Json.JsonConvert.DeserializeObject<Author>(data);
		}

		public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;

		protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
		{
			var handler = PropertyChanged;
			if (handler != null)
				handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
		}

	}

	[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.42.0 (Newtonsoft.Json v9.0.0.0)")]
	public partial class SectionSummary : System.ComponentModel.INotifyPropertyChanged
	{
		private int? _bookKey;
		private int? _depth;
		private string _pageReference;
		private int? _parentSectionKey;
		private int? _sectionKey;
		private string _sectionName;
		private System.Collections.ObjectModel.ObservableCollection<SectionSummary> _subsections;
		private int? _totalVideoCount;
		private int? _videoCount;
		private System.Collections.ObjectModel.ObservableCollection<WeaponVersusSummary> _weapons;

		[Newtonsoft.Json.JsonProperty("bookKey", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public int? BookKey
		{
			get { return _bookKey; }
			set
			{
				if (_bookKey != value)
				{
					_bookKey = value;
					RaisePropertyChanged();
				}
			}
		}

		[Newtonsoft.Json.JsonProperty("depth", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public int? Depth
		{
			get { return _depth; }
			set
			{
				if (_depth != value)
				{
					_depth = value;
					RaisePropertyChanged();
				}
			}
		}

		[Newtonsoft.Json.JsonProperty("pageReference", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public string PageReference
		{
			get { return _pageReference; }
			set
			{
				if (_pageReference != value)
				{
					_pageReference = value;
					RaisePropertyChanged();
				}
			}
		}

		[Newtonsoft.Json.JsonProperty("parentSectionKey", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public int? ParentSectionKey
		{
			get { return _parentSectionKey; }
			set
			{
				if (_parentSectionKey != value)
				{
					_parentSectionKey = value;
					RaisePropertyChanged();
				}
			}
		}

		[Newtonsoft.Json.JsonProperty("sectionKey", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public int? SectionKey
		{
			get { return _sectionKey; }
			set
			{
				if (_sectionKey != value)
				{
					_sectionKey = value;
					RaisePropertyChanged();
				}
			}
		}

		[Newtonsoft.Json.JsonProperty("sectionName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public string SectionName
		{
			get { return _sectionName; }
			set
			{
				if (_sectionName != value)
				{
					_sectionName = value;
					RaisePropertyChanged();
				}
			}
		}

		[Newtonsoft.Json.JsonProperty("subsections", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public System.Collections.ObjectModel.ObservableCollection<SectionSummary> Subsections
		{
			get { return _subsections; }
			set
			{
				if (_subsections != value)
				{
					_subsections = value;
					RaisePropertyChanged();
				}
			}
		}

		[Newtonsoft.Json.JsonProperty("totalVideoCount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public int? TotalVideoCount
		{
			get { return _totalVideoCount; }
			set
			{
				if (_totalVideoCount != value)
				{
					_totalVideoCount = value;
					RaisePropertyChanged();
				}
			}
		}

		[Newtonsoft.Json.JsonProperty("videoCount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public int? VideoCount
		{
			get { return _videoCount; }
			set
			{
				if (_videoCount != value)
				{
					_videoCount = value;
					RaisePropertyChanged();
				}
			}
		}

		[Newtonsoft.Json.JsonProperty("weapons", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public System.Collections.ObjectModel.ObservableCollection<WeaponVersusSummary> Weapons
		{
			get { return _weapons; }
			set
			{
				if (_weapons != value)
				{
					_weapons = value;
					RaisePropertyChanged();
				}
			}
		}

		public string ToJson()
		{
			return Newtonsoft.Json.JsonConvert.SerializeObject(this);
		}

		public static SectionSummary FromJson(string data)
		{
			return Newtonsoft.Json.JsonConvert.DeserializeObject<SectionSummary>(data);
		}

		public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;

		protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
		{
			var handler = PropertyChanged;
			if (handler != null)
				handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
		}

	}

	[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.42.0 (Newtonsoft.Json v9.0.0.0)")]
	public partial class WeaponVersus : System.ComponentModel.INotifyPropertyChanged
	{
		private int? _sectionKey;
		private int? _primaryWeaponKey;
		private string _primaryWeaponName;
		private int? _secondaryWeaponKey;
		private string _secondaryWeaponName;

		[Newtonsoft.Json.JsonProperty("sectionKey", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public int? SectionKey
		{
			get { return _sectionKey; }
			set
			{
				if (_sectionKey != value)
				{
					_sectionKey = value;
					RaisePropertyChanged();
				}
			}
		}

		[Newtonsoft.Json.JsonProperty("primaryWeaponKey", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public int? PrimaryWeaponKey
		{
			get { return _primaryWeaponKey; }
			set
			{
				if (_primaryWeaponKey != value)
				{
					_primaryWeaponKey = value;
					RaisePropertyChanged();
				}
			}
		}

		[Newtonsoft.Json.JsonProperty("primaryWeaponName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public string PrimaryWeaponName
		{
			get { return _primaryWeaponName; }
			set
			{
				if (_primaryWeaponName != value)
				{
					_primaryWeaponName = value;
					RaisePropertyChanged();
				}
			}
		}

		[Newtonsoft.Json.JsonProperty("secondaryWeaponKey", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public int? SecondaryWeaponKey
		{
			get { return _secondaryWeaponKey; }
			set
			{
				if (_secondaryWeaponKey != value)
				{
					_secondaryWeaponKey = value;
					RaisePropertyChanged();
				}
			}
		}

		[Newtonsoft.Json.JsonProperty("secondaryWeaponName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public string SecondaryWeaponName
		{
			get { return _secondaryWeaponName; }
			set
			{
				if (_secondaryWeaponName != value)
				{
					_secondaryWeaponName = value;
					RaisePropertyChanged();
				}
			}
		}

		public string ToJson()
		{
			return Newtonsoft.Json.JsonConvert.SerializeObject(this);
		}

		public static WeaponVersus FromJson(string data)
		{
			return Newtonsoft.Json.JsonConvert.DeserializeObject<WeaponVersus>(data);
		}

		public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;

		protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
		{
			var handler = PropertyChanged;
			if (handler != null)
				handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
		}

	}

	[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.42.0 (Newtonsoft.Json v9.0.0.0)")]
	public partial class WeaponVersusSummary : System.ComponentModel.INotifyPropertyChanged
	{
		private int? _sectionKey;
		private int? _primaryWeaponKey;
		private int? _secondaryWeaponKey;

		[Newtonsoft.Json.JsonProperty("sectionKey", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public int? SectionKey
		{
			get { return _sectionKey; }
			set
			{
				if (_sectionKey != value)
				{
					_sectionKey = value;
					RaisePropertyChanged();
				}
			}
		}

		[Newtonsoft.Json.JsonProperty("primaryWeaponKey", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public int? PrimaryWeaponKey
		{
			get { return _primaryWeaponKey; }
			set
			{
				if (_primaryWeaponKey != value)
				{
					_primaryWeaponKey = value;
					RaisePropertyChanged();
				}
			}
		}

		[Newtonsoft.Json.JsonProperty("secondaryWeaponKey", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public int? SecondaryWeaponKey
		{
			get { return _secondaryWeaponKey; }
			set
			{
				if (_secondaryWeaponKey != value)
				{
					_secondaryWeaponKey = value;
					RaisePropertyChanged();
				}
			}
		}

		public string ToJson()
		{
			return Newtonsoft.Json.JsonConvert.SerializeObject(this);
		}

		public static WeaponVersusSummary FromJson(string data)
		{
			return Newtonsoft.Json.JsonConvert.DeserializeObject<WeaponVersusSummary>(data);
		}

		public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;

		protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
		{
			var handler = PropertyChanged;
			if (handler != null)
				handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
		}

	}

	[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.42.0 (Newtonsoft.Json v9.0.0.0)")]
	public partial class SectionDetail : System.ComponentModel.INotifyPropertyChanged
	{
		private int? _bookKey;
		private string _bookName;
		private string _pageReference;
		private int? _parentSectionKey;
		private int? _sectionKey;
		private string _sectionName;
		private System.Collections.ObjectModel.ObservableCollection<SectionSummary> _subsections;
		private int? _videoCount;
		private System.Collections.ObjectModel.ObservableCollection<Video> _videos;
		private System.Collections.ObjectModel.ObservableCollection<WeaponVersus> _weapons;

		[Newtonsoft.Json.JsonProperty("bookKey", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public int? BookKey
		{
			get { return _bookKey; }
			set
			{
				if (_bookKey != value)
				{
					_bookKey = value;
					RaisePropertyChanged();
				}
			}
		}

		[Newtonsoft.Json.JsonProperty("bookName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public string BookName
		{
			get { return _bookName; }
			set
			{
				if (_bookName != value)
				{
					_bookName = value;
					RaisePropertyChanged();
				}
			}
		}

		[Newtonsoft.Json.JsonProperty("pageReference", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public string PageReference
		{
			get { return _pageReference; }
			set
			{
				if (_pageReference != value)
				{
					_pageReference = value;
					RaisePropertyChanged();
				}
			}
		}

		[Newtonsoft.Json.JsonProperty("parentSectionKey", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public int? ParentSectionKey
		{
			get { return _parentSectionKey; }
			set
			{
				if (_parentSectionKey != value)
				{
					_parentSectionKey = value;
					RaisePropertyChanged();
				}
			}
		}

		[Newtonsoft.Json.JsonProperty("sectionKey", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public int? SectionKey
		{
			get { return _sectionKey; }
			set
			{
				if (_sectionKey != value)
				{
					_sectionKey = value;
					RaisePropertyChanged();
				}
			}
		}

		[Newtonsoft.Json.JsonProperty("sectionName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public string SectionName
		{
			get { return _sectionName; }
			set
			{
				if (_sectionName != value)
				{
					_sectionName = value;
					RaisePropertyChanged();
				}
			}
		}

		[Newtonsoft.Json.JsonProperty("subsections", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public System.Collections.ObjectModel.ObservableCollection<SectionSummary> Subsections
		{
			get { return _subsections; }
			set
			{
				if (_subsections != value)
				{
					_subsections = value;
					RaisePropertyChanged();
				}
			}
		}

		[Newtonsoft.Json.JsonProperty("videoCount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public int? VideoCount
		{
			get { return _videoCount; }
			set
			{
				if (_videoCount != value)
				{
					_videoCount = value;
					RaisePropertyChanged();
				}
			}
		}

		[Newtonsoft.Json.JsonProperty("videos", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public System.Collections.ObjectModel.ObservableCollection<Video> Videos
		{
			get { return _videos; }
			set
			{
				if (_videos != value)
				{
					_videos = value;
					RaisePropertyChanged();
				}
			}
		}

		[Newtonsoft.Json.JsonProperty("weapons", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public System.Collections.ObjectModel.ObservableCollection<WeaponVersus> Weapons
		{
			get { return _weapons; }
			set
			{
				if (_weapons != value)
				{
					_weapons = value;
					RaisePropertyChanged();
				}
			}
		}

		public string ToJson()
		{
			return Newtonsoft.Json.JsonConvert.SerializeObject(this);
		}

		public static SectionDetail FromJson(string data)
		{
			return Newtonsoft.Json.JsonConvert.DeserializeObject<SectionDetail>(data);
		}

		public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;

		protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
		{
			var handler = PropertyChanged;
			if (handler != null)
				handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
		}

	}

	[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.42.0 (Newtonsoft.Json v9.0.0.0)")]
	public partial class Video : System.ComponentModel.INotifyPropertyChanged
	{
		private int? _createdByUserKey;
		private System.DateTime? _createdDate;
		private int? _sectionKey;
		private string _startTime;
		private string _url;
		private int? _videoKey;
		private int? _videoServiceKey;
		private string _videoServiceVideoId;
		private string _author;
		private string _description;

		[Newtonsoft.Json.JsonProperty("createdByUserKey", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public int? CreatedByUserKey
		{
			get { return _createdByUserKey; }
			set
			{
				if (_createdByUserKey != value)
				{
					_createdByUserKey = value;
					RaisePropertyChanged();
				}
			}
		}

		[Newtonsoft.Json.JsonProperty("createdDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public System.DateTime? CreatedDate
		{
			get { return _createdDate; }
			set
			{
				if (_createdDate != value)
				{
					_createdDate = value;
					RaisePropertyChanged();
				}
			}
		}

		[Newtonsoft.Json.JsonProperty("sectionKey", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public int? SectionKey
		{
			get { return _sectionKey; }
			set
			{
				if (_sectionKey != value)
				{
					_sectionKey = value;
					RaisePropertyChanged();
				}
			}
		}

		[Newtonsoft.Json.JsonProperty("startTime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public string StartTime
		{
			get { return _startTime; }
			set
			{
				if (_startTime != value)
				{
					_startTime = value;
					RaisePropertyChanged();
				}
			}
		}

		[Newtonsoft.Json.JsonProperty("url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public string Url
		{
			get { return _url; }
			set
			{
				if (_url != value)
				{
					_url = value;
					RaisePropertyChanged();
				}
			}
		}

		[Newtonsoft.Json.JsonProperty("videoKey", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public int? VideoKey
		{
			get { return _videoKey; }
			set
			{
				if (_videoKey != value)
				{
					_videoKey = value;
					RaisePropertyChanged();
				}
			}
		}

		[Newtonsoft.Json.JsonProperty("videoServiceKey", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public int? VideoServiceKey
		{
			get { return _videoServiceKey; }
			set
			{
				if (_videoServiceKey != value)
				{
					_videoServiceKey = value;
					RaisePropertyChanged();
				}
			}
		}

		[Newtonsoft.Json.JsonProperty("videoServiceVideoId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public string VideoServiceVideoId
		{
			get { return _videoServiceVideoId; }
			set
			{
				if (_videoServiceVideoId != value)
				{
					_videoServiceVideoId = value;
					RaisePropertyChanged();
				}
			}
		}

		[Newtonsoft.Json.JsonProperty("author", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public string Author
		{
			get { return _author; }
			set
			{
				if (_author != value)
				{
					_author = value;
					RaisePropertyChanged();
				}
			}
		}

		[Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public string Description
		{
			get { return _description; }
			set
			{
				if (_description != value)
				{
					_description = value;
					RaisePropertyChanged();
				}
			}
		}

		public string ToJson()
		{
			return Newtonsoft.Json.JsonConvert.SerializeObject(this);
		}

		public static Video FromJson(string data)
		{
			return Newtonsoft.Json.JsonConvert.DeserializeObject<Video>(data);
		}

		public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;

		protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
		{
			var handler = PropertyChanged;
			if (handler != null)
				handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
		}

	}

	[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.42.0 (Newtonsoft.Json v9.0.0.0)")]
	public partial class NewVideo : System.ComponentModel.INotifyPropertyChanged
	{
		private string _author;
		private string _description;
		private int? _sectionKey;
		private string _startTime;
		private string _url;

		[Newtonsoft.Json.JsonProperty("author", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public string Author
		{
			get { return _author; }
			set
			{
				if (_author != value)
				{
					_author = value;
					RaisePropertyChanged();
				}
			}
		}

		[Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public string Description
		{
			get { return _description; }
			set
			{
				if (_description != value)
				{
					_description = value;
					RaisePropertyChanged();
				}
			}
		}

		[Newtonsoft.Json.JsonProperty("sectionKey", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public int? SectionKey
		{
			get { return _sectionKey; }
			set
			{
				if (_sectionKey != value)
				{
					_sectionKey = value;
					RaisePropertyChanged();
				}
			}
		}

		[Newtonsoft.Json.JsonProperty("startTime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public string StartTime
		{
			get { return _startTime; }
			set
			{
				if (_startTime != value)
				{
					_startTime = value;
					RaisePropertyChanged();
				}
			}
		}

		[Newtonsoft.Json.JsonProperty("url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public string Url
		{
			get { return _url; }
			set
			{
				if (_url != value)
				{
					_url = value;
					RaisePropertyChanged();
				}
			}
		}

		public string ToJson()
		{
			return Newtonsoft.Json.JsonConvert.SerializeObject(this);
		}

		public static NewVideo FromJson(string data)
		{
			return Newtonsoft.Json.JsonConvert.DeserializeObject<NewVideo>(data);
		}

		public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;

		protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
		{
			var handler = PropertyChanged;
			if (handler != null)
				handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
		}

	}

	[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.42.0 (Newtonsoft.Json v9.0.0.0)")]
	public partial class Weapon : System.ComponentModel.INotifyPropertyChanged
	{
		private int? _weaponKey;
		private string _weaponName;

		[Newtonsoft.Json.JsonProperty("weaponKey", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public int? WeaponKey
		{
			get { return _weaponKey; }
			set
			{
				if (_weaponKey != value)
				{
					_weaponKey = value;
					RaisePropertyChanged();
				}
			}
		}

		[Newtonsoft.Json.JsonProperty("weaponName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public string WeaponName
		{
			get { return _weaponName; }
			set
			{
				if (_weaponName != value)
				{
					_weaponName = value;
					RaisePropertyChanged();
				}
			}
		}

		public string ToJson()
		{
			return Newtonsoft.Json.JsonConvert.SerializeObject(this);
		}

		public static Weapon FromJson(string data)
		{
			return Newtonsoft.Json.JsonConvert.DeserializeObject<Weapon>(data);
		}

		public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;

		protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
		{
			var handler = PropertyChanged;
			if (handler != null)
				handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
		}

	}

	[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.42.0 (Newtonsoft.Json v9.0.0.0)")]
	public partial class Technique : System.ComponentModel.INotifyPropertyChanged
	{
		private int? _techniqueKey;
		private string _techniqueName;
		private string _alternateTechniqueName;

		[Newtonsoft.Json.JsonProperty("techniqueKey", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public int? TechniqueKey
		{
			get { return _techniqueKey; }
			set
			{
				if (_techniqueKey != value)
				{
					_techniqueKey = value;
					RaisePropertyChanged();
				}
			}
		}

		[Newtonsoft.Json.JsonProperty("techniqueName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public string TechniqueName
		{
			get { return _techniqueName; }
			set
			{
				if (_techniqueName != value)
				{
					_techniqueName = value;
					RaisePropertyChanged();
				}
			}
		}

		[Newtonsoft.Json.JsonProperty("alternateTechniqueName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public string AlternateTechniqueName
		{
			get { return _alternateTechniqueName; }
			set
			{
				if (_alternateTechniqueName != value)
				{
					_alternateTechniqueName = value;
					RaisePropertyChanged();
				}
			}
		}

		public string ToJson()
		{
			return Newtonsoft.Json.JsonConvert.SerializeObject(this);
		}

		public static Technique FromJson(string data)
		{
			return Newtonsoft.Json.JsonConvert.DeserializeObject<Technique>(data);
		}

		public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;

		protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
		{
			var handler = PropertyChanged;
			if (handler != null)
				handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
		}

	}

	[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.42.0 (Newtonsoft.Json v9.0.0.0)")]
	public partial class Target : System.ComponentModel.INotifyPropertyChanged
	{
		private int? _targetKey;
		private string _targetName;

		[Newtonsoft.Json.JsonProperty("targetKey", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public int? TargetKey
		{
			get { return _targetKey; }
			set
			{
				if (_targetKey != value)
				{
					_targetKey = value;
					RaisePropertyChanged();
				}
			}
		}

		[Newtonsoft.Json.JsonProperty("targetName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public string TargetName
		{
			get { return _targetName; }
			set
			{
				if (_targetName != value)
				{
					_targetName = value;
					RaisePropertyChanged();
				}
			}
		}

		public string ToJson()
		{
			return Newtonsoft.Json.JsonConvert.SerializeObject(this);
		}

		public static Target FromJson(string data)
		{
			return Newtonsoft.Json.JsonConvert.DeserializeObject<Target>(data);
		}

		public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;

		protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
		{
			var handler = PropertyChanged;
			if (handler != null)
				handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
		}

	}

	[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.42.0 (Newtonsoft.Json v9.0.0.0)")]
	public partial class Guard : System.ComponentModel.INotifyPropertyChanged
	{
		private int? _guardKey;
		private string _guardName;
		private string _alternateGuardName;

		[Newtonsoft.Json.JsonProperty("guardKey", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public int? GuardKey
		{
			get { return _guardKey; }
			set
			{
				if (_guardKey != value)
				{
					_guardKey = value;
					RaisePropertyChanged();
				}
			}
		}

		[Newtonsoft.Json.JsonProperty("guardName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public string GuardName
		{
			get { return _guardName; }
			set
			{
				if (_guardName != value)
				{
					_guardName = value;
					RaisePropertyChanged();
				}
			}
		}

		[Newtonsoft.Json.JsonProperty("alternateGuardName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public string AlternateGuardName
		{
			get { return _alternateGuardName; }
			set
			{
				if (_alternateGuardName != value)
				{
					_alternateGuardName = value;
					RaisePropertyChanged();
				}
			}
		}

		public string ToJson()
		{
			return Newtonsoft.Json.JsonConvert.SerializeObject(this);
		}

		public static Guard FromJson(string data)
		{
			return Newtonsoft.Json.JsonConvert.DeserializeObject<Guard>(data);
		}

		public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;

		protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
		{
			var handler = PropertyChanged;
			if (handler != null)
				handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
		}

	}

	[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.42.0 (Newtonsoft.Json v9.0.0.0)")]
	public partial class GuardModifer : System.ComponentModel.INotifyPropertyChanged
	{
		private int? _guardModiferKey;
		private string _guardModiferName;

		[Newtonsoft.Json.JsonProperty("guardModiferKey", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public int? GuardModiferKey
		{
			get { return _guardModiferKey; }
			set
			{
				if (_guardModiferKey != value)
				{
					_guardModiferKey = value;
					RaisePropertyChanged();
				}
			}
		}

		[Newtonsoft.Json.JsonProperty("guardModiferName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public string GuardModiferName
		{
			get { return _guardModiferName; }
			set
			{
				if (_guardModiferName != value)
				{
					_guardModiferName = value;
					RaisePropertyChanged();
				}
			}
		}

		public string ToJson()
		{
			return Newtonsoft.Json.JsonConvert.SerializeObject(this);
		}

		public static GuardModifer FromJson(string data)
		{
			return Newtonsoft.Json.JsonConvert.DeserializeObject<GuardModifer>(data);
		}

		public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;

		protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
		{
			var handler = PropertyChanged;
			if (handler != null)
				handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
		}

	}

	[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.42.0 (Newtonsoft.Json v9.0.0.0)")]
	public partial class Footwork : System.ComponentModel.INotifyPropertyChanged
	{
		private int? _footworkKey;
		private string _footworkName;

		[Newtonsoft.Json.JsonProperty("footworkKey", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public int? FootworkKey
		{
			get { return _footworkKey; }
			set
			{
				if (_footworkKey != value)
				{
					_footworkKey = value;
					RaisePropertyChanged();
				}
			}
		}

		[Newtonsoft.Json.JsonProperty("footworkName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public string FootworkName
		{
			get { return _footworkName; }
			set
			{
				if (_footworkName != value)
				{
					_footworkName = value;
					RaisePropertyChanged();
				}
			}
		}

		public string ToJson()
		{
			return Newtonsoft.Json.JsonConvert.SerializeObject(this);
		}

		public static Footwork FromJson(string data)
		{
			return Newtonsoft.Json.JsonConvert.DeserializeObject<Footwork>(data);
		}

		public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;

		protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
		{
			var handler = PropertyChanged;
			if (handler != null)
				handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
		}

	}

	[System.CodeDom.Compiler.GeneratedCode("NSwag", "11.17.0.0 (NJsonSchema v9.10.42.0 (Newtonsoft.Json v9.0.0.0))")]
	public partial class SwaggerException : System.Exception
	{
		public int StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>> Headers { get; private set; }

		public SwaggerException(string message, int statusCode, string response, System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Exception innerException)
			: base(message, innerException)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
		}

		public override string ToString()
		{
			return string.Format("HTTP Response: \n\n{0}\n\n{1}", Response, base.ToString());
		}
	}

	[System.CodeDom.Compiler.GeneratedCode("NSwag", "11.17.0.0 (NJsonSchema v9.10.42.0 (Newtonsoft.Json v9.0.0.0))")]
	public partial class SwaggerException<TResult> : SwaggerException
	{
		public TResult Result { get; private set; }

		public SwaggerException(string message, int statusCode, string response, System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>> headers, TResult result, System.Exception innerException)
			: base(message, statusCode, response, headers, innerException)
		{
			Result = result;
		}
	}

}