/**
 * My API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


import * as $ from 'jquery';
import * as models from '../model/models';
import { COLLECTION_FORMATS } from '../variables';
import { Configuration } from '../configuration';

/* tslint:disable:no-unused-variable member-ordering */


export class BookApiApi {
    protected basePath = 'https://localhost';
    public defaultHeaders: Array<string> = [];
    public configuration: Configuration = new Configuration();

    constructor(basePath?: string, configuration?: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
        }
    }

    private extendObj<T1, T2 extends T1>(objA: T2, objB: T2): T1|T2 {
        for (let key in objB) {
            if (objB.hasOwnProperty(key)) {
                objA[key] = objB[key];
            }
        }
        return objA;
    }

    /**
     * 
     * @param video 
     */
    public apiBookAddVideoPost(video?: models.NewVideo): JQueryPromise<{ response: JQueryXHR; body?: any;  }> {
        let localVarPath = this.basePath + '/api/book/addVideo';

        let queryParameters: any = {};
        let headerParams: any = {};

        localVarPath = localVarPath + "?" + $.param(queryParameters);
        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json-patch+json', 
            'application/json', 
            'text/json', 
            'application/_*+json'
        ];

        // to determine the Accept header
        let produces: string[] = [
        ];


        headerParams['Content-Type'] = 'application/json';

        let requestOptions: JQueryAjaxSettings = {
            url: localVarPath,
            type: 'POST',
            headers: headerParams,
            processData: false
        };

        requestOptions.data = JSON.stringify(video);
        if (headerParams['Content-Type']) {
            requestOptions.contentType = headerParams['Content-Type'];
        }

        let dfd = $.Deferred();
        $.ajax(requestOptions).then(
            (data: any, textStatus: string, jqXHR: JQueryXHR) =>
                dfd.resolve(jqXHR, data),
            (xhr: JQueryXHR, textStatus: string, errorThrown: string) =>
                dfd.reject(xhr, errorThrown)
        );
        return dfd.promise();
    }

    /**
     * 
     * @param sectionKey 
     * @param bookKey 
     */
    public apiBookByBookKeyBySectionKeyGet(sectionKey: number, bookKey: string): JQueryPromise<{ response: JQueryXHR; body: models.SectionDetail;  }> {
        let localVarPath = this.basePath + '/api/book/{BookKey}/{SectionKey}'.replace('{' + 'SectionKey' + '}', encodeURIComponent(String(sectionKey))).replace('{' + 'BookKey' + '}', encodeURIComponent(String(bookKey)));

        let queryParameters: any = {};
        let headerParams: any = {};
        // verify required parameter 'sectionKey' is not null or undefined
        if (sectionKey === null || sectionKey === undefined) {
            throw new Error('Required parameter sectionKey was null or undefined when calling apiBookByBookKeyBySectionKeyGet.');
        }

        // verify required parameter 'bookKey' is not null or undefined
        if (bookKey === null || bookKey === undefined) {
            throw new Error('Required parameter bookKey was null or undefined when calling apiBookByBookKeyBySectionKeyGet.');
        }


        localVarPath = localVarPath + "?" + $.param(queryParameters);
        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        // to determine the Accept header
        let produces: string[] = [
            'application/json'
        ];


        let requestOptions: JQueryAjaxSettings = {
            url: localVarPath,
            type: 'GET',
            headers: headerParams,
            processData: false
        };

        if (headerParams['Content-Type']) {
            requestOptions.contentType = headerParams['Content-Type'];
        }

        let dfd = $.Deferred();
        $.ajax(requestOptions).then(
            (data: models.SectionDetail, textStatus: string, jqXHR: JQueryXHR) =>
                dfd.resolve(jqXHR, data),
            (xhr: JQueryXHR, textStatus: string, errorThrown: string) =>
                dfd.reject(xhr, errorThrown)
        );
        return dfd.promise();
    }

    /**
     * 
     * @param bookKey 
     */
    public apiBookByBookKeyDetailGet(bookKey: number): JQueryPromise<{ response: JQueryXHR; body: models.BookDetail;  }> {
        let localVarPath = this.basePath + '/api/book/{bookKey}/detail'.replace('{' + 'bookKey' + '}', encodeURIComponent(String(bookKey)));

        let queryParameters: any = {};
        let headerParams: any = {};
        // verify required parameter 'bookKey' is not null or undefined
        if (bookKey === null || bookKey === undefined) {
            throw new Error('Required parameter bookKey was null or undefined when calling apiBookByBookKeyDetailGet.');
        }


        localVarPath = localVarPath + "?" + $.param(queryParameters);
        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        // to determine the Accept header
        let produces: string[] = [
            'application/json'
        ];


        let requestOptions: JQueryAjaxSettings = {
            url: localVarPath,
            type: 'GET',
            headers: headerParams,
            processData: false
        };

        if (headerParams['Content-Type']) {
            requestOptions.contentType = headerParams['Content-Type'];
        }

        let dfd = $.Deferred();
        $.ajax(requestOptions).then(
            (data: models.BookDetail, textStatus: string, jqXHR: JQueryXHR) =>
                dfd.resolve(jqXHR, data),
            (xhr: JQueryXHR, textStatus: string, errorThrown: string) =>
                dfd.reject(xhr, errorThrown)
        );
        return dfd.promise();
    }

    /**
     * 
     * @param bookKey 
     */
    public apiBookByBookKeyGet(bookKey: number): JQueryPromise<{ response: JQueryXHR; body: models.BookSummary;  }> {
        let localVarPath = this.basePath + '/api/book/{bookKey}'.replace('{' + 'bookKey' + '}', encodeURIComponent(String(bookKey)));

        let queryParameters: any = {};
        let headerParams: any = {};
        // verify required parameter 'bookKey' is not null or undefined
        if (bookKey === null || bookKey === undefined) {
            throw new Error('Required parameter bookKey was null or undefined when calling apiBookByBookKeyGet.');
        }


        localVarPath = localVarPath + "?" + $.param(queryParameters);
        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        // to determine the Accept header
        let produces: string[] = [
            'application/json'
        ];


        let requestOptions: JQueryAjaxSettings = {
            url: localVarPath,
            type: 'GET',
            headers: headerParams,
            processData: false
        };

        if (headerParams['Content-Type']) {
            requestOptions.contentType = headerParams['Content-Type'];
        }

        let dfd = $.Deferred();
        $.ajax(requestOptions).then(
            (data: models.BookSummary, textStatus: string, jqXHR: JQueryXHR) =>
                dfd.resolve(jqXHR, data),
            (xhr: JQueryXHR, textStatus: string, errorThrown: string) =>
                dfd.reject(xhr, errorThrown)
        );
        return dfd.promise();
    }

    /**
     * 
     */
    public apiBookGet(): JQueryPromise<{ response: JQueryXHR; body: Array<models.BookSummary>;  }> {
        let localVarPath = this.basePath + '/api/book';

        let queryParameters: any = {};
        let headerParams: any = {};

        localVarPath = localVarPath + "?" + $.param(queryParameters);
        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        // to determine the Accept header
        let produces: string[] = [
            'application/json'
        ];


        let requestOptions: JQueryAjaxSettings = {
            url: localVarPath,
            type: 'GET',
            headers: headerParams,
            processData: false
        };

        if (headerParams['Content-Type']) {
            requestOptions.contentType = headerParams['Content-Type'];
        }

        let dfd = $.Deferred();
        $.ajax(requestOptions).then(
            (data: Array<models.BookSummary>, textStatus: string, jqXHR: JQueryXHR) =>
                dfd.resolve(jqXHR, data),
            (xhr: JQueryXHR, textStatus: string, errorThrown: string) =>
                dfd.reject(xhr, errorThrown)
        );
        return dfd.promise();
    }

    /**
     * 
     */
    public apiBookWhoAmIGet(): JQueryPromise<{ response: JQueryXHR; body: models.ApplicationUser;  }> {
        let localVarPath = this.basePath + '/api/book/whoAmI';

        let queryParameters: any = {};
        let headerParams: any = {};

        localVarPath = localVarPath + "?" + $.param(queryParameters);
        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        // to determine the Accept header
        let produces: string[] = [
            'application/json'
        ];


        let requestOptions: JQueryAjaxSettings = {
            url: localVarPath,
            type: 'GET',
            headers: headerParams,
            processData: false
        };

        if (headerParams['Content-Type']) {
            requestOptions.contentType = headerParams['Content-Type'];
        }

        let dfd = $.Deferred();
        $.ajax(requestOptions).then(
            (data: models.ApplicationUser, textStatus: string, jqXHR: JQueryXHR) =>
                dfd.resolve(jqXHR, data),
            (xhr: JQueryXHR, textStatus: string, errorThrown: string) =>
                dfd.reject(xhr, errorThrown)
        );
        return dfd.promise();
    }

}
